{"version":3,"sources":["components/Toast/Toast.module.scss","components/Modal/ModalComponents/DeleteModal/DeleteModal.module.scss","components/Modal/Modal.module.scss","api/persons-api.ts","components/Modal/ModalComponents/InputModal/InputModal.tsx","components/Modal/ModalComponents/DeleteModal/DeleteModal.tsx","components/Modal/Modal.tsx","app/app-reducer.ts","app/hooks/app-hooks.ts","app/utils/app-utils.ts","components/Modal/ModalContainer.tsx","components/Toast/Toast.tsx","app/App.tsx","reportWebVitals.ts","app/store.ts","index.tsx","app/Main.module.scss","components/Modal/ModalComponents/InputModal/InputModal.module.scss"],"names":["module","exports","personsApi","createApi","reducerPath","tagTypes","baseQuery","fetchBaseQuery","baseUrl","endpoints","builder","getPersons","query","providesTags","result","map","type","id","addPerson","mutation","body","url","method","invalidatesTags","deletePerson","updatePerson","useGetPersonsQuery","useAddPersonMutation","useDeletePersonMutation","useUpdatePersonMutation","InputModal","memo","props","title","onClose","actionCallback","useState","firstName","setFirstName","lastName","setLastName","className","style","header","close","onClick","inputs","htmlFor","name","placeholder","value","onChange","e","currentTarget","buttons","btnClose","btnSave","DeleteModal","itemName","deleteAction","personName","btnDelete","Modal","modal","modalActions","isShow","background","backGroundOnClick","modalStatus","modalTitle","closeModal","setModal","appSlice","createSlice","initialState","itemId","itemTitle","toast","reducers","setModalStatus","state","action","payload","setToast","push","deleteToast","filter","t","appReducer","reducer","actions","useAppDispatch","useDispatch","useAppSelector","useSelector","useToast","dispatch","setNewToast","toastType","toastMessage","toastId","v1","toastTitle","ModalContainer","app","useCallback","params","a","unwrap","then","isSuccess","Toast","generateIcon","generateBackgroundColor","notificationContainer","setTimeout","notification","backgroundColor","closeButton","notificationImage","notificationTitle","notificationMessage","App","data","isLoading","changeModalStatus","trigger","dataset","button","useModal","deleteButtonHandler","param","updateButtonHandler","wrapper","btnAdd","data-button","container","tableHeader","table","p","tableRow","personInfo","btnEdit","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","concat","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0FACAA,EAAOC,QAAU,CAAC,sBAAwB,qCAAqC,aAAe,4BAA4B,gBAAgB,6BAA6B,MAAQ,qBAAqB,kBAAoB,iCAAiC,oBAAsB,mCAAmC,kBAAoB,iCAAiC,YAAc,6B,mBCArXD,EAAOC,QAAU,CAAC,OAAS,4BAA4B,MAAQ,2BAA2B,MAAQ,2BAA2B,QAAU,6BAA6B,UAAY,iC,mBCAhLD,EAAOC,QAAU,CAAC,WAAa,0BAA0B,MAAQ,uB,yICMpDC,EAAaC,oBAAU,CAChCC,YAAa,aACbC,SAAU,CAAC,WACXC,UAAWC,yBAAe,CAACC,QAAQ,2BACnCC,UAAW,SAAAC,GAAO,MAAK,CACnBC,WAAYD,EAAQE,MAA4B,CAC5CA,MAAO,4BACPC,aAAc,SAAAC,GAAM,OAChBA,EAAM,sBAEKA,EAAOC,KAAI,kBAAa,CAAEC,KAAM,UAAoBC,GAAzC,EAAGA,QAFnB,CAGE,CAAED,KAAM,UAAWC,GAAI,UAEzB,CAAC,CAAED,KAAM,UAAWC,GAAI,YAEtCC,UAAWR,EAAQS,SAAS,CACxBP,MAAO,SAACQ,GAAD,MAAiC,CACpCC,IAAK,UACLC,OAAQ,OACRF,SAEJG,gBAAiB,CAAC,CAACP,KAAM,UAAWC,GAAI,WAE5CO,aAAcd,EAAQS,SAAS,CAC3BP,MAAO,SAACQ,GAAD,MAAoC,CACvCC,IAAI,WAAD,OAAaD,EAAKH,IACrBK,OAAQ,SACRF,SAEJG,gBAAiB,CAAC,CAACP,KAAM,UAAWC,GAAI,WAE5CQ,aAAcf,EAAQS,SAAS,CAC3BP,MAAO,SAACQ,GAAD,MAAoC,CACvCC,IAAI,WAAD,OAAaD,EAAKH,IACrBK,OAAQ,MACRF,SAEJG,gBAAiB,CAAC,CAACP,KAAM,UAAWC,GAAI,eAMhDS,EAG2BxB,EAH3BwB,mBACAC,EAE2BzB,EAF3ByB,qBACAC,EAC2B1B,EAD3B0B,wBACAC,EAA2B3B,EAA3B2B,wB,iFC3CSC,EAAiCC,gBAAK,SAAAC,GAAU,IAClDC,EAAkCD,EAAlCC,MAAOC,EAA2BF,EAA3BE,QAASC,EAAkBH,EAAlBG,eADiC,EAGtBC,mBAAiB,IAHK,mBAGjDC,EAHiD,KAGtCC,EAHsC,OAIxBF,mBAAiB,IAJO,mBAIjDG,EAJiD,KAIvCC,EAJuC,KAkBxD,OACI,qCACI,sBAAKC,UAAWC,IAAMC,OAAtB,UACI,mBAAGF,UAAWC,IAAMT,MAApB,SAA4BA,IAC5B,sBAAMQ,UAAWC,IAAME,MAAOC,QAASX,OAE3C,sBAAKO,UAAWC,IAAMI,OAAtB,UACI,uBAAOC,QAAQ,aAAf,yBACA,uBACI/B,KAAK,OACLgC,KAAM,aACNC,YAAa,aACbR,UAAWC,IAAML,UACjBa,MAAOb,EACPc,SA1BS,SAACC,GACtBd,EAAac,EAAEC,cAAcH,UA2BrB,uBAAOH,QAAQ,YAAf,wBACA,uBACI/B,KAAK,OACLgC,KAAM,YACNC,YAAa,YACbR,UAAWC,IAAMH,SACjBW,MAAOX,EACPY,SA/BQ,SAACC,GACrBZ,EAAYY,EAAEC,cAAcH,aAiCxB,sBAAKT,UAAWC,IAAMY,QAAtB,UACI,wBAAQT,QAASX,EAASO,UAAWC,IAAMa,SAA3C,mBACA,wBAAQV,QAhCU,WAC1BV,EAAe,CAACE,UAAWA,EAAWE,SAAUA,KA+BAE,UAAWC,IAAMc,QAAzD,2B,iBC7CHC,EAAmC1B,gBAAK,SAAAC,GAAU,IACpDC,EAA0CD,EAA1CC,MAAOyB,EAAmC1B,EAAnC0B,SAAUxB,EAAyBF,EAAzBE,QAASyB,EAAgB3B,EAAhB2B,aAE3BC,EAAaF,GAAQ,UAAOA,EAASrB,UAAhB,YAA6BqB,EAASnB,UAEjE,OACI,qCACI,sBAAKE,UAAWC,IAAMC,OAAtB,UACI,mBAAGF,UAAWC,IAAMT,MAApB,mBAA+BA,EAA/B,YAAwC2B,EAAxC,OACA,sBAAMnB,UAAWC,IAAME,MAAOC,QAASX,OAE3C,sBAAKO,UAAWC,IAAMY,QAAtB,UACI,wBAAQT,QAASX,EAAjB,mBACA,wBAAQW,QAASc,EAAclB,UAAWC,IAAMmB,UAAhD,6BCZHC,EAA4B/B,gBAAK,SAAAC,GAAU,IAC7C+B,EAAuB/B,EAAvB+B,MAAOC,EAAgBhC,EAAhBgC,aA0Bd,OAAKD,EAAME,OAGP,qCACI,qBAAKxB,UAAWC,IAAMwB,WAAYrB,QAASmB,EAAaG,oBACxD,qBAAK1B,UAAWC,IAAMqB,MAAtB,SA7BS,WACb,OAAQ/B,EAAM+B,MAAMK,aAChB,IAAK,aACD,OAAO,cAACtC,EAAD,CACHG,MAAO8B,EAAMM,WACbnC,QAAS8B,EAAaM,WACtBnC,eAAgB6B,EAAa9C,YAErC,IAAK,gBACD,OAAO,cAACY,EAAD,CACHG,MAAO8B,EAAMM,WACbnC,QAAS8B,EAAaM,WACtBnC,eAAgB6B,EAAavC,eAErC,IAAK,gBACD,OAAO,cAACgC,EAAD,CACHxB,MAAO8B,EAAMM,WACbX,SAAUK,EAAML,SAChBxB,QAAS8B,EAAaM,WACtBX,aAAcK,EAAaxC,gBAW9B+C,QANa,Q,OCpCjBC,EAAWC,sBAAY,CAChCzB,KAAM,MACN0B,aAAc,CACVX,MAAO,CACHE,QAAQ,EACRI,WAAY,GACZD,YAAa,YACbO,OAAQ,EACRC,UAAW,MAEfC,MAAO,IAEXC,SAAU,CACNC,eAAgB,SAACC,EAAOC,GACpBD,EAAMjB,MAAQkB,EAAOC,SAEzBC,SAAU,SAACH,EAAOC,GACdD,EAAMH,MAAMO,KAAKH,EAAOC,UAE5BG,YAAa,SAACL,EAAMC,GAChB,OAAO,2BAAID,GAAX,IAAkBH,MAAOG,EAAMH,MAAMS,QAAO,SAAAC,GAAC,OAAIA,EAAEtE,KAAOgE,EAAOC,iBAKhEM,EAAahB,EAASiB,Q,EACoBjB,EAASkB,QAAlDX,E,EAAAA,eAAgBI,E,EAAAA,SAAUE,E,EAAAA,Y,OCzB3BM,EAAiB,kBAAMC,yBACvBC,EAAsDC,c,QCsCtDC,EAAW,WACpB,IAAMC,EAA6BL,IAEnC,MAAO,CACHM,YAAa,SAACC,EAAqBC,GAC/B,IAAMC,EAAUC,cAChBL,EAASb,EAAS,CAAClE,GAAImF,EAASF,YAAWI,WAAY,QAASH,mBAEpEd,YAAa,SAACpE,GACV+E,EAASX,EAAYpE,OCpCpBsF,EAAqBxE,gBAAK,WAAO,IAAD,EAEnCgC,EAAQ8B,GAAe,SAAAb,GAAK,OAAIA,EAAMwB,IAAIzC,SAE1CiC,EAAWL,IACVM,EAAeF,IAAfE,YAED/E,EAAYS,IACZF,EAAeI,IACfL,EAAeI,IAIfoC,EAA6B,CAC/B9C,UAAWuF,sBAAW,uCAAC,WAAOC,GAAP,SAAAC,EAAA,sEACbzF,EAAU,GAAGwF,GAAQE,SACtBC,MAAK,WACE3F,EAAU,GAAG4F,WACbb,EAAY,UAAW,iCAE3BD,EAASjB,EAAe,CAACd,QAAQ,EAAOG,YAAa,YAAaC,WAAY,SANnE,2CAAD,sDAQnB,CAAC2B,EAAU9E,EAAW+E,IACzBxE,aAAcgF,sBAAW,uCAAC,WAAOC,GAAP,SAAAC,EAAA,0DAClB5C,EAAMY,OADY,gCAEZlD,EAAa,GAAb,2BAAoBiF,GAApB,IAA4BzF,GAAI8C,EAAMY,UAASiC,SAChDC,MAAK,WACEpF,EAAa,GAAGqF,WAChBb,EAAY,UAAW,kCALjB,OAQlBD,EAASjB,EAAe,CAACd,QAAQ,EAAOG,YAAa,YAAaC,WAAY,MAR5D,2CAAD,sDAUtB,CAAC2B,EAAUvE,EAAcsC,EAAMY,OAAQsB,IAC1CzE,aAAciF,sBAAW,sBAAC,sBAAAE,EAAA,0DAClB5C,EAAMY,OADY,gCAEZnD,EAAa,GAAG,CAACP,GAAI8C,EAAMY,SAASiC,SACrCC,MAAK,WAC8B,IAAD,EAA3BrF,EAAa,GAAGsF,WAChBb,EACI,UADO,2BAEGlC,EAAML,gBAFT,aAEG,EAAgBrB,UAFnB,6BALL,OAWlB2D,EAASjB,EAAe,CAACd,QAAQ,EAAOG,YAAa,YAAaC,WAAY,MAX5D,2CAavB,CAAC2B,EAAUxE,EAAcuC,EAAMY,OAA/B,UAAuCZ,EAAML,gBAA7C,aAAuC,EAAgBrB,UAAW4D,IACrE9B,kBAAmBsC,uBAAY,WAC3BT,EAASjB,EAAe,CAACd,QAAQ,EAAOG,YAAa,YAAaC,WAAY,QAC/E,CAAC2B,IACJ1B,WAAYmC,uBAAY,WACpBT,EAASjB,EAAe,CAACd,QAAQ,EAAOG,YAAa,YAAaC,WAAY,QAC/E,CAAC2B,KAGR,OAAO,mCAAyB,cAAtBjC,EAAMK,YAA8B,6BAAQ,cAACN,EAAD,CAAOC,MAAOA,EAAOC,aAAcA,S,yBCjEhF+C,EAAYhF,gBAAK,WAE1B,IAAM8C,EAAQgB,GAAe,SAAAb,GAAK,OAAIA,EAAMwB,IAAI3B,SACzCQ,EAAeU,IAAfV,YAED2B,EAAe,SAAChG,GAClB,OAAQA,GACJ,IAAK,UACD,OAAO,cAAC,IAAD,IACX,IAAK,OACD,OAAO,cAAC,IAAD,IACX,IAAK,QACD,OAAO,cAAC,IAAD,IACX,QACI,SAGNiG,EAA0B,SAACjG,GAC7B,OAAQA,GACJ,IAAK,UACD,MAAO,YACX,IAAK,OACD,MAAO,UACX,IAAK,QACD,MAAO,YACX,QACI,SAIZ,OACI,qBAAKyB,UAAWC,IAAMwE,sBAAtB,SACKrC,EAAM9D,KAAI,SAAAwE,GAIP,OAHA4B,YAAW,WACP9B,EAAYE,EAAEtE,MACf,KAEC,sBAEIwB,UAAS,UAAKC,IAAM0E,aAAX,YAA2B1E,IAAMmC,OAC1CnC,MAAO,CAAC2E,gBAAiBJ,EAAwB1B,EAAEW,YAHvD,UAKI,cAAC,IAAD,CAAkBzD,UAAWC,IAAM4E,YAAazE,QAAS,kBAAMwC,EAAYE,EAAEtE,OAC7E,qBAAKwB,UAAWC,IAAM6E,kBAAtB,SACKP,EAAazB,EAAEW,aAEpB,gCACI,mBAAGzD,UAAWC,IAAM8E,kBAApB,SAAwCjC,EAAEe,aAC1C,mBAAG7D,UAAWC,IAAM+E,oBAApB,SAA0ClC,EAAEY,oBAV3CZ,EAAEtE,Y,QCpClByG,EAAU3F,gBAAK,WAAO,IAAD,EACJL,EAAmB,IAAtCiG,EADuB,EACvBA,KAAMC,EADiB,EACjBA,UAEPC,EHLc,WACpB,IAAM7B,EAA6BL,IAEnC,OAAO,SAACvC,EAA+DuB,EAAiBjB,GACpF,IAAMoE,EAA8B1E,EAAEC,cAAc0E,QAAQC,OAC5C,eAAZF,GACA9B,EAASjB,EAAe,CACpBd,QAAQ,EACRG,YAAa0D,EACbzD,WAAY,2BAGJ,kBAAZyD,GACA9B,EAASjB,EAAe,CACpBd,QAAQ,EACRG,YAAa0D,EACbzD,WAAY,4BACZM,YAGQ,kBAAZmD,GACA9B,EAASjB,EAAe,CACpBd,QAAQ,EACRG,YAAa0D,EACbzD,WAAY,wBACZM,SACAjB,eGrBcuE,GAEpBC,EAAsBzB,uBAAY,SAACrD,EAA2B+E,GAChEN,EAAkBzE,EAAG+E,EAAMlH,GAAI,CAACoB,UAAW8F,EAAM9F,UAAWE,SAAU4F,EAAM5F,aAC7E,CAACsF,IAEEO,EAAsB3B,uBAAY,SAACrD,EAA2BnC,GAChE4G,EAAkBzE,EAAGnC,KACtB,CAAC4G,IAEJ,OAAID,EACO,4CAIP,sBAAKnF,UAAWC,IAAM2F,QAAtB,UACI,wBACI5F,UAAWC,IAAM4F,OACjBzF,QAAS,SAAAO,GAAC,OAAIyE,EAAkBzE,IAChCmF,cAAa,aAHjB,wBAOA,sBAAK9F,UAAWC,IAAM8F,UAAtB,UACI,sBAAK/F,UAAWC,IAAM+F,YAAtB,UACI,2CACA,6CAEJ,qBAAKhG,UAAWC,IAAMgG,MAAtB,SAEQf,GAAQA,EAAK5G,KAAI,SAAC4H,GACd,OACI,sBAAgBlG,UAAWC,IAAMkG,SAAjC,UACI,sBAAKnG,UAAWC,IAAMmG,WAAtB,UACI,4BAAIF,EAAEtG,YACN,4BAAIsG,EAAEpG,cAEV,sBAAKE,UAAWC,IAAMY,QAAtB,UACI,cAAC,IAAD,CACIb,UAAWC,IAAMoG,QACjBjG,QAAS,SAAAO,GAAC,OAAIgF,EAAoBhF,EAAGuF,EAAE1H,KACvCsH,cAAa,kBAEjB,cAAC,IAAD,CACI9F,UAAWC,IAAMmB,UACjBhB,QAAS,SAAAO,GAAC,OAAI8E,EAAoB9E,EAAGuF,IACrCJ,cAAa,uBAdfI,EAAE1H,YAmChC,cAACsF,EAAD,IACA,cAACQ,EAAD,UClEGgC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBpC,MAAK,YAAkD,IAA/CqC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,eCLRO,EAAcC,YAAgB,aAChChD,IAAKhB,GACJtF,EAAWE,YAAcF,EAAWuF,UAG5BgE,GAAQC,yBAAe,CAChCjE,QAAS8D,EACTI,WAAY,SAAAC,GAAoB,OAAIA,IAAuBC,OAAO3J,EAAWyJ,eCHjFG,IAASC,OACL,cAAC,WAAD,CAAUN,MAAOA,GAAjB,SACE,cAAC,IAAMO,WAAP,UACE,cAACtC,EAAD,QAGNuC,SAASC,eAAe,SAG1BnB,K,kBChBA/I,EAAOC,QAAU,CAAC,QAAU,sBAAsB,OAAS,qBAAqB,UAAY,wBAAwB,YAAc,0BAA0B,MAAQ,oBAAoB,SAAW,uBAAuB,WAAa,yBAAyB,QAAU,sBAAsB,QAAU,sBAAsB,UAAY,0B,kBCA5UD,EAAOC,QAAU,CAAC,OAAS,2BAA2B,MAAQ,0BAA0B,MAAQ,0BAA0B,OAAS,2BAA2B,QAAU,4BAA4B,SAAW,gC","file":"static/js/main.e2dda3bd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"notificationContainer\":\"Toast_notificationContainer__VvZTL\",\"notification\":\"Toast_notification__3FXtO\",\"toast-in-left\":\"Toast_toast-in-left__2iGoQ\",\"toast\":\"Toast_toast__1nY3-\",\"notificationTitle\":\"Toast_notificationTitle__1zQZS\",\"notificationMessage\":\"Toast_notificationMessage__3APss\",\"notificationImage\":\"Toast_notificationImage__1C_Ei\",\"closeButton\":\"Toast_closeButton__3dwAO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"DeleteModal_header__1bBpK\",\"title\":\"DeleteModal_title__2hy0w\",\"close\":\"DeleteModal_close__2qVef\",\"buttons\":\"DeleteModal_buttons__3S21H\",\"btnDelete\":\"DeleteModal_btnDelete__2yTiL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"background\":\"Modal_background__2p0-F\",\"modal\":\"Modal_modal__3Fbae\"};","import {createApi, fetchBaseQuery} from \"@reduxjs/toolkit/dist/query/react\";\r\nimport {AddPersonRequestType, DeletePersonRequestType, PersonType, UpdatePersonRequestType} from \"./types\";\r\n\r\n//Чтобы не падало ошибок безопасности\r\n/*const apiBase = String(process.env) === 'PRODUCTION' ?\r\n    'https://www.productionapp.com/' : 'http://localhost:9001/'*/\r\n\r\nexport const personsApi = createApi({\r\n    reducerPath: 'personsApi',\r\n    tagTypes: ['Persons'],\r\n    baseQuery: fetchBaseQuery({baseUrl: `http://localhost:9001/`}),\r\n    endpoints: builder => ({\r\n        getPersons: builder.query<PersonType[], string>({\r\n            query: () => `persons`,\r\n            providesTags: result =>\r\n                result\r\n                    ? [\r\n                        ...result.map(({ id }) => ({ type: 'Persons' as const, id })),\r\n                        { type: 'Persons', id: 'LIST' },\r\n                    ]\r\n                    : [{ type: 'Persons', id: 'LIST' }],\r\n        }),\r\n        addPerson: builder.mutation({\r\n            query: (body: AddPersonRequestType) => ({\r\n                url: 'persons',\r\n                method: 'POST',\r\n                body\r\n            }),\r\n            invalidatesTags: [{type: 'Persons', id: 'LIST'}]\r\n        }),\r\n        deletePerson: builder.mutation({\r\n            query: (body: DeletePersonRequestType) => ({\r\n                url: `persons/${body.id}`,\r\n                method: 'DELETE',\r\n                body\r\n            }),\r\n            invalidatesTags: [{type: 'Persons', id: 'LIST'}]\r\n        }),\r\n        updatePerson: builder.mutation({\r\n            query: (body: UpdatePersonRequestType) => ({\r\n                url: `persons/${body.id}`,\r\n                method: 'PUT',\r\n                body\r\n            }),\r\n            invalidatesTags: [{type: 'Persons', id: 'LIST'}]\r\n        }),\r\n    }),\r\n});\r\n\r\nexport const {\r\n    useGetPersonsQuery,\r\n    useAddPersonMutation,\r\n    useDeletePersonMutation,\r\n    useUpdatePersonMutation} = personsApi","import React, {ChangeEvent, FC, memo, useState} from \"react\";\r\nimport style from './InputModal.module.scss'\r\nimport {AddPersonRequestType} from \"../../../../api/types\";\r\n\r\ntype InputModalType = {\r\n    title: string\r\n    onClose: () => void\r\n    actionCallback: (params: AddPersonRequestType) => void\r\n}\r\n\r\nexport const InputModal: FC<InputModalType> = memo(props => {\r\n    const {title, onClose, actionCallback} = props\r\n\r\n    const [firstName, setFirstName] = useState<string>('')\r\n    const [lastName, setLastName] = useState<string>('')\r\n\r\n    const firstNameHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setFirstName(e.currentTarget.value)\r\n    }\r\n\r\n    const lastNameHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setLastName(e.currentTarget.value)\r\n    }\r\n\r\n    const actionCallbackHandler = () => {\r\n        actionCallback({firstName: firstName, lastName: lastName})\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={style.header}>\r\n                <p className={style.title}>{title}</p>\r\n                <span className={style.close} onClick={onClose}/>\r\n            </div>\r\n            <div className={style.inputs}>\r\n                <label htmlFor='first name'>First Name:</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name={'first name'}\r\n                    placeholder={'First Name'}\r\n                    className={style.firstName}\r\n                    value={firstName}\r\n                    onChange={firstNameHandler}\r\n                />\r\n                <label htmlFor='last name'>Last Name:</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name={'last name'}\r\n                    placeholder={'Last Name'}\r\n                    className={style.lastName}\r\n                    value={lastName}\r\n                    onChange={lastNameHandler}\r\n                />\r\n            </div>\r\n            <div className={style.buttons}>\r\n                <button onClick={onClose} className={style.btnClose}>Close</button>\r\n                <button onClick={actionCallbackHandler} className={style.btnSave}>Save</button>\r\n            </div>\r\n        </>\r\n    )\r\n});","import React, {FC, memo} from \"react\";\r\nimport style from './DeleteModal.module.scss'\r\nimport {ItemNameType} from \"../../../../app/app-types\";\r\n\r\ntype DeleteModalType = {\r\n    title: string\r\n    itemName: ItemNameType | null | undefined\r\n    onClose: () => void\r\n    deleteAction: () => void\r\n}\r\n\r\nexport const DeleteModal: FC<DeleteModalType> = memo(props => {\r\n    const {title, itemName, onClose, deleteAction} = props\r\n\r\n    const personName = itemName && `${itemName.firstName} ${itemName.lastName}`\r\n\r\n    return (\r\n        <>\r\n            <div className={style.header}>\r\n                <p className={style.title}>{`${title} ${personName}?`}</p>\r\n                <span className={style.close} onClick={onClose}/>\r\n            </div>\r\n            <div className={style.buttons}>\r\n                <button onClick={onClose}>Close</button>\r\n                <button onClick={deleteAction} className={style.btnDelete}>Delete</button>\r\n            </div>\r\n        </>\r\n    )\r\n});","import React, {FC, memo} from \"react\";\r\nimport style from './Modal.module.scss'\r\nimport {InputModal} from \"./ModalComponents/InputModal/InputModal\";\r\nimport {DeleteModal} from \"./ModalComponents/DeleteModal/DeleteModal\";\r\nimport {ModalActions} from \"./ModalContainer\";\r\nimport {ModalType} from \"../../app/app-types\";\r\n\r\ntype ModalPropsType = {\r\n    modal: ModalType\r\n    modalActions: ModalActions\r\n}\r\n\r\nexport const Modal: FC<ModalPropsType> = memo(props => {\r\n    const {modal, modalActions} = props\r\n\r\n    const setModal = () => {\r\n        switch (props.modal.modalStatus) {\r\n            case \"add-person\":\r\n                return <InputModal\r\n                    title={modal.modalTitle}\r\n                    onClose={modalActions.closeModal}\r\n                    actionCallback={modalActions.addPerson}\r\n                />\r\n            case \"update-person\":\r\n                return <InputModal\r\n                    title={modal.modalTitle}\r\n                    onClose={modalActions.closeModal}\r\n                    actionCallback={modalActions.updatePerson}\r\n                />\r\n            case \"delete-person\":\r\n                return <DeleteModal\r\n                    title={modal.modalTitle}\r\n                    itemName={modal.itemName}\r\n                    onClose={modalActions.closeModal}\r\n                    deleteAction={modalActions.deletePerson}\r\n                />\r\n        }\r\n    }\r\n\r\n    if (!modal.isShow) return null\r\n\r\n    return (\r\n        <>\r\n            <div className={style.background} onClick={modalActions.backGroundOnClick}/>\r\n            <div className={style.modal}>\r\n                {setModal()}\r\n            </div>\r\n        </>\r\n    )\r\n});","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {AppInitialStateType, ModalType, ToastNotificationType} from \"./app-types\";\r\n\r\nexport const appSlice = createSlice({\r\n    name: 'app',\r\n    initialState: {\r\n        modal: {\r\n            isShow: false,\r\n            modalTitle: '',\r\n            modalStatus: 'no-status',\r\n            itemId: 0,\r\n            itemTitle: null\r\n        },\r\n        toast: []\r\n    } as AppInitialStateType,\r\n    reducers: {\r\n        setModalStatus: (state, action: PayloadAction<ModalType>) => {\r\n            state.modal = action.payload\r\n        },\r\n        setToast: (state, action: PayloadAction<ToastNotificationType>) => {\r\n            state.toast.push(action.payload)\r\n        },\r\n        deleteToast: (state,action:PayloadAction<string>) => {\r\n            return {...state, toast: state.toast.filter(t => t.id !== action.payload)}\r\n        }\r\n    }\r\n});\r\n\r\nexport const appReducer = appSlice.reducer;\r\nexport const {setModalStatus, setToast, deleteToast} = appSlice.actions;","import {TypedUseSelectorHook, useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType, ThunkAppDispatch} from \"../store\";\r\n\r\n\r\nexport const useAppDispatch = () => useDispatch<ThunkAppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootStateType> = useSelector;","import {MouseEvent} from \"react\";\r\nimport {ThunkAppDispatch} from \"../store\";\r\nimport {ItemNameType, ToastType} from \"../app-types\";\r\nimport {deleteToast, setModalStatus, setToast} from \"../app-reducer\";\r\nimport {useAppDispatch} from \"../hooks/app-hooks\";\r\nimport {v1} from \"uuid\";\r\n\r\nexport const useModal = () => {\r\n    const dispatch: ThunkAppDispatch = useAppDispatch();\r\n\r\n    return (e: MouseEvent<HTMLButtonElement | SVGElement |HTMLDivElement>, itemId?: number, itemName?: ItemNameType) => {\r\n        const trigger: string | undefined = e.currentTarget.dataset.button\r\n        if (trigger === 'add-person') {\r\n            dispatch(setModalStatus({\r\n                isShow: true,\r\n                modalStatus: trigger,\r\n                modalTitle: 'Enter the person data'\r\n            }))\r\n        }\r\n        if (trigger === 'update-person') {\r\n            dispatch(setModalStatus({\r\n                isShow: true,\r\n                modalStatus: trigger,\r\n                modalTitle: 'Enter the new person data',\r\n                itemId\r\n            }))\r\n        }\r\n        if (trigger === 'delete-person') {\r\n            dispatch(setModalStatus({\r\n                isShow: true,\r\n                modalStatus: trigger,\r\n                modalTitle: 'Do you want to delete',\r\n                itemId,\r\n                itemName\r\n            }))\r\n        }\r\n    }\r\n};\r\n\r\ninterface UseToastReturn{\r\n    setNewToast: (toastType:ToastType, toastMessage: string) => void,\r\n    deleteToast: (id: string) => void\r\n}\r\nexport const useToast = ():UseToastReturn => {\r\n    const dispatch: ThunkAppDispatch = useAppDispatch();\r\n\r\n    return {\r\n        setNewToast: (toastType:ToastType, toastMessage: string) => {\r\n            const toastId = v1()\r\n            dispatch(setToast({id: toastId, toastType, toastTitle: 'Title', toastMessage}))\r\n        },\r\n        deleteToast: (id: string) => {\r\n            dispatch(deleteToast(id))\r\n        }\r\n    }\r\n};","import React, {FC, memo, useCallback} from \"react\";\r\nimport {Modal} from \"./Modal\";\r\nimport {setModalStatus} from \"../../app/app-reducer\";\r\nimport {useAppDispatch, useAppSelector} from \"../../app/hooks/app-hooks\";\r\nimport {useAddPersonMutation, useDeletePersonMutation, useUpdatePersonMutation} from \"../../api/persons-api\";\r\nimport {AddPersonRequestType} from \"../../api/types\";\r\nimport {useToast} from \"../../app/utils/app-utils\";\r\n\r\nexport interface ModalActions {\r\n    addPerson: (params: AddPersonRequestType) => void\r\n    updatePerson: (params: AddPersonRequestType) => void\r\n    deletePerson: () => void\r\n    backGroundOnClick: () => void\r\n    closeModal: () => void\r\n}\r\n\r\nexport const ModalContainer: FC = memo(() => {\r\n\r\n    const modal = useAppSelector(state => state.app.modal);\r\n\r\n    const dispatch = useAppDispatch();\r\n    const {setNewToast} = useToast();\r\n\r\n    const addPerson = useAddPersonMutation();\r\n    const updatePerson = useUpdatePersonMutation();\r\n    const deletePerson = useDeletePersonMutation();\r\n\r\n\r\n\r\n    const modalActions: ModalActions = {\r\n        addPerson: useCallback(async (params: AddPersonRequestType) => {\r\n            await addPerson[0](params).unwrap()\r\n                .then(() => {\r\n                    if (addPerson[1].isSuccess) {\r\n                        setNewToast('success', 'New Person added successfully')\r\n                    }\r\n                    dispatch(setModalStatus({isShow: false, modalStatus: 'no-status', modalTitle: '',}))\r\n                })\r\n        }, [dispatch, addPerson, setNewToast]),\r\n        updatePerson: useCallback(async (params: AddPersonRequestType) => {\r\n            if (modal.itemId) {\r\n                await updatePerson[0]({...params, id: modal.itemId}).unwrap()\r\n                    .then(() => {\r\n                        if (updatePerson[1].isSuccess) {\r\n                            setNewToast('success', 'Person updated successfully')\r\n                        }\r\n                    })\r\n                dispatch(setModalStatus({isShow: false, modalStatus: 'no-status', modalTitle: '',}))\r\n            }\r\n        }, [dispatch, updatePerson, modal.itemId, setNewToast]),\r\n        deletePerson: useCallback(async () => {\r\n            if (modal.itemId) {\r\n                await deletePerson[0]({id: modal.itemId}).unwrap()\r\n                    .then(() => {\r\n                        if (deletePerson[1].isSuccess) {\r\n                            setNewToast(\r\n                                'success',\r\n                                `Person ${modal.itemName?.firstName} deleted successfully`\r\n                            )\r\n                        }\r\n                    })\r\n                dispatch(setModalStatus({isShow: false, modalStatus: 'no-status', modalTitle: '',}))\r\n            }\r\n        }, [dispatch, deletePerson, modal.itemId, modal.itemName?.firstName, setNewToast]),\r\n        backGroundOnClick: useCallback(() => {\r\n            dispatch(setModalStatus({isShow: false, modalStatus: 'no-status', modalTitle: '',}))\r\n        }, [dispatch]),\r\n        closeModal: useCallback(() => {\r\n            dispatch(setModalStatus({isShow: false, modalStatus: 'no-status', modalTitle: '',}))\r\n        }, [dispatch])\r\n    }\r\n\r\n    return <>{modal.modalStatus === 'no-status' ? <></> : <Modal modal={modal} modalActions={modalActions}/>}</>\r\n\r\n});","import React, {FC, memo} from 'react';\r\nimport style from './Toast.module.scss';\r\nimport {ToastType} from \"../../app/app-types\";\r\nimport {FaCheck, FaExclamationCircle, FaInfoCircle, FaRegWindowClose} from \"react-icons/all\";\r\nimport {useAppSelector} from \"../../app/hooks/app-hooks\";\r\nimport {useToast} from \"../../app/utils/app-utils\";\r\n\r\nexport const Toast: FC = memo(() => {\r\n\r\n    const toast = useAppSelector(state => state.app.toast)\r\n    const {deleteToast} = useToast();\r\n\r\n    const generateIcon = (type: ToastType) => {\r\n        switch (type) {\r\n            case 'success':\r\n                return <FaCheck/>\r\n            case 'info':\r\n                return <FaInfoCircle/>\r\n            case 'error':\r\n                return <FaExclamationCircle/>\r\n            default:\r\n                return\r\n        }\r\n    }\r\n    const generateBackgroundColor = (type: ToastType) => {\r\n        switch (type) {\r\n            case 'success':\r\n                return '#2AA80AFF'\r\n            case 'info':\r\n                return '#10b795'\r\n            case 'error':\r\n                return '#CC0707FF'\r\n            default:\r\n                return\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={style.notificationContainer}>\r\n            {toast.map(t => {\r\n                setTimeout(() => {\r\n                    deleteToast(t.id)\r\n                }, 3000)\r\n                return (\r\n                    <div\r\n                        key={t.id}\r\n                        className={`${style.notification} ${style.toast}`}\r\n                        style={{backgroundColor: generateBackgroundColor(t.toastType)}}\r\n                    >\r\n                        <FaRegWindowClose className={style.closeButton} onClick={() => deleteToast(t.id)}/>\r\n                        <div className={style.notificationImage}>\r\n                            {generateIcon(t.toastType)}\r\n                        </div>\r\n                        <div>\r\n                            <p className={style.notificationTitle}>{t.toastTitle}</p>\r\n                            <p className={style.notificationMessage}>{t.toastMessage}</p>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n});\r\n","import React, {FC, memo, MouseEvent, useCallback} from 'react';\r\nimport style from './Main.module.scss';\r\nimport {useGetPersonsQuery} from \"../api/persons-api\";\r\nimport {PersonType} from \"../api/types\";\r\nimport {ModalContainer} from \"../components/Modal/ModalContainer\";\r\nimport {Toast} from \"../components/Toast/Toast\";\r\nimport {useModal} from \"./utils/app-utils\";\r\nimport {MdDelete, MdModeEditOutline} from \"react-icons/all\";\r\n\r\nexport const App: FC = memo(() => {\r\n    const {data, isLoading} = useGetPersonsQuery('');\r\n\r\n    const changeModalStatus = useModal();\r\n\r\n    const deleteButtonHandler = useCallback((e: MouseEvent<SVGElement>, param: PersonType) => {\r\n        changeModalStatus(e, param.id, {firstName: param.firstName, lastName: param.lastName})\r\n    }, [changeModalStatus])\r\n\r\n    const updateButtonHandler = useCallback((e: MouseEvent<SVGElement>, id: number) => {\r\n        changeModalStatus(e, id)\r\n    }, [changeModalStatus])\r\n\r\n    if (isLoading) {\r\n        return <h1>...Loading</h1>\r\n    }\r\n\r\n    return (\r\n        <div className={style.wrapper}>\r\n            <button\r\n                className={style.btnAdd}\r\n                onClick={e => changeModalStatus(e)}\r\n                data-button={'add-person'}\r\n            >\r\n                ADD PERSON\r\n            </button>\r\n            <div className={style.container}>\r\n                <div className={style.tableHeader}>\r\n                    <p>First Name</p>\r\n                    <p>Last Name</p>\r\n                </div>\r\n                <div className={style.table}>\r\n                    {\r\n                        data && data.map((p: PersonType) => {\r\n                            return (\r\n                                <div key={p.id} className={style.tableRow}>\r\n                                    <div className={style.personInfo}>\r\n                                        <p>{p.firstName}</p>\r\n                                        <p>{p.lastName}</p>\r\n                                    </div>\r\n                                    <div className={style.buttons}>\r\n                                        <MdModeEditOutline\r\n                                            className={style.btnEdit}\r\n                                            onClick={e => updateButtonHandler(e, p.id)}\r\n                                            data-button={'update-person'}\r\n                                        />\r\n                                        <MdDelete\r\n                                            className={style.btnDelete}\r\n                                            onClick={e => deleteButtonHandler(e, p)}\r\n                                            data-button={'delete-person'}\r\n                                        />\r\n                                        {/*<button\r\n                                            onClick={e => deleteButtonHandler(e, p)}\r\n                                            data-button={'delete-person'}\r\n                                        >\r\n                                            Delete Person\r\n                                        </button>\r\n                                        <button\r\n                                            onClick={e => updateButtonHandler(e, p.id)}\r\n                                            data-button={'update-person'}\r\n                                        >\r\n                                            Update Person\r\n                                        </button>*/}\r\n                                    </div>\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n            </div>\r\n            <ModalContainer/>\r\n            <Toast/>\r\n        </div>\r\n    )\r\n});\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {Action, combineReducers, configureStore, ThunkDispatch} from \"@reduxjs/toolkit\";\r\nimport {personsApi} from '../api/persons-api'\r\nimport {appReducer} from \"./app-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    app: appReducer,\r\n    [personsApi.reducerPath]: personsApi.reducer,\r\n})\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().concat(personsApi.middleware),\r\n});\r\n\r\nexport type RootStateType = ReturnType<typeof store.getState>;\r\nexport type ThunkAppDispatch = ThunkDispatch<RootStateType, void, Action>\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App} from './app/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n      <React.StrictMode>\r\n        <App />\r\n      </React.StrictMode>\r\n    </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Main_wrapper__2B1dy\",\"btnAdd\":\"Main_btnAdd__10CIX\",\"container\":\"Main_container__cQzMG\",\"tableHeader\":\"Main_tableHeader__13TKT\",\"table\":\"Main_table__ollvK\",\"tableRow\":\"Main_tableRow__3UxK3\",\"personInfo\":\"Main_personInfo__26YKF\",\"buttons\":\"Main_buttons__c7D62\",\"btnEdit\":\"Main_btnEdit__UmhRc\",\"btnDelete\":\"Main_btnDelete__1qEqf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"InputModal_header__2_RRR\",\"title\":\"InputModal_title__3T3ES\",\"close\":\"InputModal_close__2o0cn\",\"inputs\":\"InputModal_inputs__1WYQ0\",\"buttons\":\"InputModal_buttons__2CVWX\",\"btnClose\":\"InputModal_btnClose__1XsYU\"};"],"sourceRoot":""}